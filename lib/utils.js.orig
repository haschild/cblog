let express = require("express");
let path = require("path");
let fs = require("fs");

let swig = require("swig");
swig.setDefaults({ cache: false })
let markdownIt = require("markdown-it");
let md = new markdownIt({
    html: true,
    langPrefix: 'code-',
})
let rd = require("rd");
/**
 * 渲染模板
<<<<<<< HEAD
 * @param {*} file 显 示 内 容html路径
=======
 * @param {*} file 显  示内容   html路径
>>>>>>> e151c87cb314ba33bf16c625518873f45254ddc8
 * @param {*} data 配置显示数据
 */
function renderFile(file, data) {
    return swig.render(fs.readFileSync(file).toString(), {
        filename: file,
        autoescape: false,
        escape: "lala",
        locals: data // 设定值，可以用 {{}} 获取
    })
}

/**
 * 获取数据
 * @param {*} data 获取md文件的字符串数据
 */
function parseSourceContent(data = "") {
    data = data.trim();
    let info = {};
    data.split("\n").forEach((line) => {
        let mapval = line.split(":");
        info[mapval[0]] = mapval[1];

    });
    return info;
}

/**
 * 去掉文件的扩展名
 * @param {*} name 传入文件名称
 */
function stripExtname(name) {
    let i = 0 - path.extname(name).length; // path.extname 提取文件路径的扩展名
    if (i === 0) i = name.length;
    return name.slice(0, i);
}
// 将markdown转变成html
function markdownToHTML(content) {
    return md.render(content || "");
}
/**
 * 遍历所有的文件
 * @param {*} sourceDir 资源文件路径
 * @param {*} callback  获取文件路径后执行的回调方法
 */
function eachSourceFile(sourceDir, callback) {
    rd.eachFileFilterSync(sourceDir, /\.md$/, callback);
}

/**
 * 渲染文章列表
 * @param {*} dir 当前路径
 */
function renderIndex(dir) {
    let list = [];
    let sourceDir = path.resolve(dir, "posts");
    eachSourceFile(sourceDir, function (f, s) {
        let source = fs.readFileSync(f).toString();
        let post = parseSourceContent(source);
        post.timestamp = new Date(post.date);
        post.url = '/posts/' + stripExtname(f.slice(sourceDir.length + 1)) + '.html';
        list.push(post);
    })

    list.sort(function (a, b) {
        return b.timestamp - a.timestamp;
    })
    let config = loadConfig(dir);
    let html = renderFile(path.resolve(dir, 'page', 'index.html'), {
        posts: list,
        config: config
    })
    return html;
}

/**
 * 渲染文件
 * @param {*} dir 当前路径
 * @param {*} file 获取数据md文件名称
 */
function renderPost(dir, file) {
    let content = fs.readFileSync(path.resolve(file)).toString();
    let post = parseSourceContent(content);
    let config = loadConfig(dir);
    let html = renderFile(path.resolve(dir, "page", post.layout + ".html"), {
        config: config,
        posts: post
    })
    return html;
}

/**
 * 加载配置文件
 * @param {*} dir 配置文件所在路径
 */
function loadConfig(dir) {
    let content = fs.readFileSync(path.resolve(dir, '../', 'lib', "config.json")).toString();
    let data = JSON.parse(content);
    return data;
}
module.exports = {
    markdownToHTML,
    eachSourceFile,
    stripExtname,
    parseSourceContent,
    renderFile,
    renderIndex,
    renderPost,
    loadConfig
}
